struct Node
{
    Node *links[26];
    bool flag = false;

    bool containsKey(char ch)
    {
        return (links[ch - 'a'] != NULL);
    }

    void put(char ch, Node *node)
    {
        links[ch - 'a'] = node;
    }

    Node *get(char ch)
    {
        return links[ch - 'a'];
    }

    void setEnd()
    {
        flag = true;
    }

    bool isEnd()
    {
        return flag;
    }
};

class Trie
{
    Node *root;

public:
    Trie()
    {
        root = new Node();
    }

    void insert(string word)
    {
        Node *node = root;
        for (auto i : word)
        {
            if (!node->containsKey(i))
                node->put(i, new Node());

            node = node->get(i);
        }
        node->setEnd();
    }

    bool search(string word)
    {
        Node *node = root;
        for (auto i : word)
        {
            if (!node->containsKey(i))
                return false;
            node = node->get(i);
        }
        return node->isEnd();
    }

    string getRoot(string word)
    {
        Node *node = root;
        string prefix = "";
        for (char ch : word)
        {
            if (node->containsKey(ch))
            {
                prefix += ch;
                node = node->get(ch);
                if (node->isEnd())
                    return prefix;
            }
            else
            {
                break;
            }
        }
        return word;
    }
};

class Solution
{
public:
    string replaceWords(vector<string> &dictionary, string sentence)
    {
        Trie *trie = new Trie();

        for (auto i : dictionary)
            trie->insert(i);

        string ans = "", word;

        stringstream ss(sentence);
        while (ss >> word)
            ans += trie->getRoot(word) + " ";

        ans.pop_back();

        return ans;
    }
};
